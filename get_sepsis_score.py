#!/usr/bin/env python

import numpy as np
import os

from main_train import Model, load_pickled_data
from parse_dataset import PatientData

MODEL_ROOT_DIR = os.path.dirname(__file__)
from transformer import Transformer, ModifiedStandardScaler

PatientData = PatientData
Transformer = Transformer
ModifiedStandardScaler = ModifiedStandardScaler

MODEL_NAME = 'prototypes/m_20190821072955/best_loss'
DECISION_THERSHOLD = 0.00


def get_sepsis_score(data, model):
    # input defined by physionet challenge
    # data: shape = (t, 40)
    # model: classification model returned from load_sepsis_model()

    dummy_y = np.zeros(data.shape[0])
    patient_data = PatientData(sequence_x=data,
                               sequence_y=dummy_y)

    y_true, y_prob = model.get_predictions([patient_data], 1)

    u_adj = match_prob(y_prob[0], data.shape[0], DECISION_THERSHOLD+0.5)
    if u_adj > 1:
        print(u_adj)
    return u_adj, np.round(u_adj + DECISION_THERSHOLD)


def load_sepsis_model():
    transformer = load_pickled_data('transformer', 'pickled_data')
    model = Model(transformer=transformer,
                  model_dir=os.path.join(MODEL_ROOT_DIR, MODEL_NAME),
                  only_eval=True)
    model.__enter__()
    return model


th_var = threshold_optimized_adj = [0.737373737373737,0.898989898989899,0.555555555555556,0.575757575757576,0.434343434343434,0.444444444444444,0.444444444444444,0.409090909090909,0.409090909090909,0.409090909090909,0.414141414141414,0.414141414141414,0.373737373737374,0.358585858585859,0.328282828282828,0.373737373737374,0.373737373737374,0.520202020202020,0.520202020202020,0.520202020202020,0.520202020202020,0.414141414141414,0.444444444444444,0.474747474747475,0.535353535353535,0.535353535353535,0.535353535353535,0.500000000000000,0.479797979797980,0.459595959595960,0.449494949494950,0.449494949494950,0.444444444444444,0.429292929292929,0.429292929292929,0.429292929292929,0.419191919191919,0.414141414141414,0.398989898989899,0.368686868686869,0.348484848484849,0.292929292929293,0.267676767676768,0.247474747474748,0.242424242424242,0.242424242424242,0.237373737373737,0.227272727272727,0.222222222222222,0.217171717171717,0.161616161616162,0.111111111111111,0.106060606060606,0.101010101010101,0.101010101010101,0.101010101010101,0.101010101010101,0.101010101010101,0.101010101010101,0.111111111111111,0.126262626262626,0.131313131313131,0.131313131313131,0.136363636363636,0.141414141414141,0.141414141414141,0.141414141414141,0.151515151515152,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.166666666666667,0.171717171717172,0.176767676767677,0.176767676767677,0.176767676767677,0.176767676767677,0.176767676767677,0.161616161616162,0.141414141414141,0.141414141414141,0.141414141414141,0.141414141414141,0.141414141414141,0.141414141414141,0.136363636363636,0.141414141414141,0.141414141414141,0.141414141414141,0.141414141414141,0.141414141414141,0.141414141414141,0.141414141414141,0.141414141414141,0.146464646464646,0.156565656565657,0.161616161616162,0.166666666666667,0.171717171717172,0.171717171717172,0.171717171717172,0.171717171717172,0.171717171717172,0.166666666666667,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.171717171717172,0.181818181818182,0.181818181818182,0.181818181818182,0.181818181818182,0.181818181818182,0.181818181818182,0.176767676767677,0.171717171717172,0.171717171717172,0.171717171717172,0.171717171717172,0.171717171717172,0.171717171717172,0.181818181818182,0.191919191919192,0.196969696969697,0.202020202020202,0.222222222222222,0.252525252525253,0.252525252525253,0.267676767676768,0.267676767676768,0.267676767676768,0.257575757575758,0.257575757575758,0.227272727272727,0.212121212121212,0.207070707070707,0.181818181818182,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.161616161616162,0.176767676767677,0.191919191919192,0.191919191919192,0.191919191919192,0.191919191919192,0.191919191919192,0.191919191919192,0.191919191919192,0.176767676767677,0.161616161616162,0.161616161616162,0.0808080808080808,0,0,0.0808080808080808,0.161616161616162,0.161616161616162,0.171717171717172,0.181818181818182,0.181818181818182,0.186868686868687,0.191919191919192,0.191919191919192,0.191919191919192,0.191919191919192,0.191919191919192,0.191919191919192,0.191919191919192,0.191919191919192,0.191919191919192,0.207070707070707,0.222222222222222,0.222222222222222,0.222222222222222,0.222222222222222,0.242424242424242,0.222222222222222,0.222222222222222,0.222222222222222,0.222222222222222,0.222222222222222,0.222222222222222,0.237373737373737,0.237373737373737,0.247474747474748,0.232323232323232,0.232323232323232,0.222222222222222,0.222222222222222,0.222222222222222,0.232323232323232,0.232323232323232,0.232323232323232,0.257575757575758,0.287878787878788,0.303030303030303,0.313131313131313,0.323232323232323,0.323232323232323,0.323232323232323,0.323232323232323,0.318181818181818,0.308080808080808,0.303030303030303,0.292929292929293,0.287878787878788,0.287878787878788,0.282828282828283,0.277777777777778,0.257575757575758,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.247474747474748,0.500000000000000,0.500000000000000,0.500000000000000,0.505050505050505,0.505050505050505,0.500000000000000,0.494949494949495,0.484848484848485,0.469696969696970,0.459595959595960,0.439393939393939,0.409090909090909,0.388888888888889,0.373737373737374,0.363636363636364,0.348484848484849,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.328282828282828,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.333333333333333,0.338383838383838,0.343434343434343,0.343434343434343,0.338383838383838,0.338383838383838,0.338383838383838,0.338383838383838,0.338383838383838,0.338383838383838,0.308080808080808,0.282828282828283,0.282828282828283,0.277777777777778,0.272727272727273,0.272727272727273,0.267676767676768,0.262626262626263,0.262626262626263,0.257575757575758,0.252525252525253,0.252525252525253,0.247474747474748,0.247474747474748,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.242424242424242,0.237373737373737,0.232323232323232,0.232323232323232,0.227272727272727,0.227272727272727,0.222222222222222,0.222222222222222,0.222222222222222,0.222222222222222,0.222222222222222,0.111111111111111,0,0,0,0,0,0,0,0,0,0,0,0],


def match_prob(p, t, th_const):
    if t >= len(th_var[0]):
        p_adj = p - th_var[0][-1] + th_const
    else:
        p_adj = p - th_var[0][t] + th_const
    if p_adj > 1:
        return 1
    elif p_adj < 0:
        return 0
    if p_adj > 1:
        print([p_adj])
    return p_adj
